name: Monorepo PR Checks

on:
  pull_request:
    branches: [main]

jobs:
  setup:
    runs-on: ubuntu-latest
    outputs:
      devmet-app: ${{ steps.filter.outputs.devmet-app }}
      devmet-ui: ${{ steps.filter.outputs.devmet-ui }}
      devmet-backend: ${{ steps.filter.outputs.devmet-backend }}
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
          submodules: recursive
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.6

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - run: pnpm install

      - uses: dorny/paths-filter@v3
        id: filter
        with:
          filters: |
            devmet-app:
              - 'apps/devmet-apps/**'
              - 'pnpm-workspace.yaml'
              - 'package.json'
              - 'pnpm-lock.yaml'
            devmet-ui:
              - 'package/devmet-ui/**'
              - 'pnpm-workspace.yaml'
              - 'package.json'
              - 'pnpm-lock.yaml'
            devmet-backend:
              - 'apps/devmet-backend/**'
              - 'pnpm-workspace.yaml'
              - 'package.json'
              - 'pnpm-lock.yaml'

  checks:
    needs: setup
    runs-on: ubuntu-latest
    strategy:
      matrix:
        project: ['devmet-app', 'devmet-ui', 'devmet-backend']
      fail-fast: false
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.PAT || github.token }}
          submodules: recursive
          fetch-depth: 0

      - uses: pnpm/action-setup@v4
        with:
          version: 8.15.6

      - uses: actions/setup-node@v4
        with:
          node-version: 18
          cache: 'pnpm'

      - name: Determine project directory
        id: project-dir
        run: |
          case "${{ matrix.project }}" in
            devmet-app) DIR="apps/devmet-apps" ;;
            devmet-ui) DIR="package/devmet-ui" ;;
            devmet-backend) DIR="apps/devmet-backend" ;;
          esac
          echo "dir=$DIR" >> $GITHUB_OUTPUT

      - name: Run checks
        if: needs.setup.outputs.${{ matrix.project }} == 'true' && github.event.pull_request.draft == false
        run: |
          cd ${{ steps.project-dir.outputs.dir }}
          pnpm install
          pnpm run lint
          pnpm run typecheck
          pnpm run build
          if [[ "${{ matrix.project }}" == "devmet-backend" ]]; then
            pnpm run test
          fi

  pr-checks-complete:
    runs-on: ubuntu-latest
    needs: [setup, checks]
    if: always()
    steps:
      - name: Check job statuses
        run: |
          echo "Job Status Report:"
          echo "------------------"
          echo "devmet-app: ${{ needs.setup.outputs.devmet-app }}"
          echo "devmet-ui: ${{ needs.setup.outputs.devmet-ui }}"
          echo "devmet-backend: ${{ needs.setup.outputs.devmet-backend }}"
          
          if [[ "${{ needs.setup.result }}" == "failure" ]]; then
            echo "::error::Setup job failed"
            exit 1
          fi
          
          if [[ "${{ needs.checks.result }}" == "failure" ]]; then
            echo "::error::Some checks failed"
            exit 1
          fi
          
          echo "All checks passed successfully!"